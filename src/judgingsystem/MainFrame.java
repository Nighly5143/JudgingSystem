/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package judgingsystem;

import java.util.ArrayList;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;


/**
 *
 * @author lentrix
 */
public class MainFrame extends javax.swing.JFrame {
    /**
     * Creates new form MainFrame
     */
    
    private Contestant currentContestant;
    private int totalScore;
    
    public MainFrame() {
        initComponents();
        
        contestantsList.setListData(new Contestant[] {
            new Contestant("Jury Mae Salvador",0,0,0),
            new Contestant("Gerry Hill Oracion",0,0,0),
            new Contestant("Ferry Rick Moreno",0,0,0),
            new Contestant("Faye Maricel Felicia",0,0,0),
            new Contestant("Jude Michael Amihan",0,0,0)
        });        
        updateTotalScore();
        
    }
    
    private void updateTotalScore() {
        if (currentContestant != null) {
            totalScore = currentContestant.getTotalScore();
            totalLabel.setText(String.valueOf(totalScore));
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        contestantsList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        voiceQualitySlider = new javax.swing.JSlider();
        voiceQualityField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        interpretationSlider = new javax.swing.JSlider();
        interpretationField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        musicalitySlider = new javax.swing.JSlider();
        musicalityField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Java Judging");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        jLabel1.setText("Contestants");

        contestantsList.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        contestantsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                contestantsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(contestantsList);

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        jLabel2.setText("Criteria");

        jLabel3.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel3.setText("Voice Quality 40%");

        voiceQualitySlider.setMaximum(40);
        voiceQualitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                voiceQualitySliderStateChanged(evt);
            }
        });

        voiceQualityField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        voiceQualityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voiceQualityFieldActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel4.setText("Interpretation 35%");

        interpretationSlider.setMaximum(35);
        interpretationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                interpretationSliderStateChanged(evt);
            }
        });

        interpretationField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        interpretationField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interpretationFieldActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel5.setText("Musicality 25%");

        musicalitySlider.setMaximum(25);
        musicalitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                musicalitySliderStateChanged(evt);
            }
        });

        musicalityField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        musicalityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicalityFieldActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Liberation Sans", 0, 36)); // NOI18N
        jLabel6.setText("TOTAL SCORE:");

        totalLabel.setFont(new java.awt.Font("Liberation Sans", 0, 36)); // NOI18N
        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        totalLabel.setText("000");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(voiceQualitySlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(voiceQualityField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(interpretationSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(interpretationField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(musicalitySlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(musicalityField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(voiceQualityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(voiceQualitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(interpretationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(interpretationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(musicalityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(musicalitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(totalLabel)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );

        setSize(new java.awt.Dimension(743, 451));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void contestantsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_contestantsListValueChanged
        // TODO add your handling code here:
           
        if (!evt.getValueIsAdjusting()) {
            currentContestant = contestantsList.getSelectedValue();
            if (currentContestant != null) {
                voiceQualitySlider.setValue(currentContestant.getVoiceQuality());
                voiceQualityField.setText(String.valueOf(currentContestant.getVoiceQuality()));
                
                interpretationSlider.setValue(currentContestant.getInterpretation());
                interpretationField.setText(String.valueOf(currentContestant.getInterpretation()));
                
                musicalitySlider.setValue(currentContestant.getMusicality());
                musicalityField.setText(String.valueOf(currentContestant.getMusicality()));
                
                updateTotalScore();
            }
        }

    }//GEN-LAST:event_contestantsListValueChanged

    private void voiceQualitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_voiceQualitySliderStateChanged
        // TODO add your handling code here:
        int value = voiceQualitySlider.getValue();
        voiceQualityField.setText(String.valueOf(value));
        if (currentContestant != null) {
            currentContestant.setVoiceQuality(value);
            updateTotalScore();
        }
    }//GEN-LAST:event_voiceQualitySliderStateChanged

    private void interpretationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_interpretationSliderStateChanged
        // TODO add your handling code here:
        int value = interpretationSlider.getValue();
        interpretationField.setText(String.valueOf(value));
        if (currentContestant != null) {
            currentContestant.setInterpretation(value);
            updateTotalScore();
        }
    }//GEN-LAST:event_interpretationSliderStateChanged

    private void musicalitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_musicalitySliderStateChanged
        // TODO add your handling code here:
        int value = musicalitySlider.getValue();
        musicalityField.setText(String.valueOf(value));
        if (currentContestant != null) {
            currentContestant.setMusicality(value);
            updateTotalScore();
        }
    }//GEN-LAST:event_musicalitySliderStateChanged

    private void voiceQualityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voiceQualityFieldActionPerformed
        // TODO add your handling code here:
        
        if (!voiceQualityField.getText().isEmpty()) {
            try {
                int value = Integer.parseInt(voiceQualityField.getText());
                voiceQualitySlider.setValue(value);
                if (currentContestant != null) {
                    currentContestant.setVoiceQuality(value);
                    updateTotalScore();
                }
            } catch (NumberFormatException e) {
                // Handle exception if needed
            }
        }
    }//GEN-LAST:event_voiceQualityFieldActionPerformed

    private void interpretationFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interpretationFieldActionPerformed
        // TODO add your handling code here:
        if (!interpretationField.getText().isEmpty()) {
            try {
                int value = Integer.parseInt(interpretationField.getText());
                interpretationSlider.setValue(value);
                if (currentContestant != null) {
                    currentContestant.setInterpretation(value);
                    updateTotalScore();
                }
            } catch (NumberFormatException e) {
                // Handle exception if needed
            }
        }
    }//GEN-LAST:event_interpretationFieldActionPerformed

    private void musicalityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicalityFieldActionPerformed
        // TODO add your handling code here:
        if (!musicalityField.getText().isEmpty()) {
            try {
                int value = Integer.parseInt(musicalityField.getText());
                musicalitySlider.setValue(value);
                if (currentContestant != null) {
                    currentContestant.setMusicality(value);
                    updateTotalScore();
                }
            } catch (NumberFormatException e) {
                // Handle exception if needed
            }
        }
    }//GEN-LAST:event_musicalityFieldActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<Contestant> contestantsList;
    private javax.swing.JTextField interpretationField;
    private javax.swing.JSlider interpretationSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField musicalityField;
    private javax.swing.JSlider musicalitySlider;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JTextField voiceQualityField;
    private javax.swing.JSlider voiceQualitySlider;
    // End of variables declaration//GEN-END:variables
}
